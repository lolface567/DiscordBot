package org.Psyholog.CheakPsyholog;

import net.dv8tion.jda.api.EmbedBuilder;
import net.dv8tion.jda.api.entities.Guild;
import net.dv8tion.jda.api.entities.Member;
import net.dv8tion.jda.api.events.interaction.command.SlashCommandInteractionEvent;
import net.dv8tion.jda.api.hooks.ListenerAdapter;
import org.Psyholog.Ticket.DataStorage;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

public class TopPsyhologCommand extends ListenerAdapter {
    private static final Logger logger = LoggerFactory.getLogger(TopPsyhologCommand.class);

    @Override
    public void onSlashCommandInteraction(SlashCommandInteractionEvent event) {
        if (event.getName().equals("top")) {
            Guild guild = event.getGuild();
            Map<String, List<Integer>> psychologistRatings = DataStorage.getInstance().getPsychologistRatings();

            // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø—Å–∏—Ö–æ–ª–æ–≥–æ–≤ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –æ—Ü–µ–Ω–æ–∫
            Map<String, Long> sortedPsychologists = psychologistRatings.entrySet().stream()
                    .sorted((entry1, entry2) -> Long.compare(
                            entry2.getValue().size(), // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –æ—Ü–µ–Ω–æ–∫
                            entry1.getValue().size()
                    ))
                    .collect(Collectors.toMap(
                            Map.Entry::getKey, // –ö–ª—é—á ‚Äî —ç—Ç–æ ID –ø—Å–∏—Ö–æ–ª–æ–≥–∞
                            entry -> (long) entry.getValue().size(), // –ó–Ω–∞—á–µ–Ω–∏–µ ‚Äî —ç—Ç–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ü–µ–Ω–æ–∫
                            (e1, e2) -> e1, // –ù–∞ —Å–ª—É—á–∞–π –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
                            LinkedHashMap::new // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Ä—è–¥–æ–∫ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
                    ));

            // –°–æ–∑–¥–∞–µ–º —ç–º–±–µ–¥-—Å–æ–æ–±—â–µ–Ω–∏–µ
            EmbedBuilder embedBuilder = new EmbedBuilder();
            embedBuilder.setTitle("üîπ –¢–æ–ø –ø—Å–∏—Ö–æ–ª–æ–≥–æ–≤");
            embedBuilder.setColor(0x00ADEF);

            sortedPsychologists.entrySet().stream()
                    .limit(10) // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –≤—ã–≤–æ–¥ –¥–æ —Ç–æ–ø-10
                    .forEach(entry -> {
                        String id = entry.getKey();
                        Long reviewCount = entry.getValue();
                        Integer closeTicketsCount = DataStorage.getInstance().getPsychologCloseCount(id);
                        Double averageRating = DataStorage.getInstance().getAverageRating(id); // –ü–æ–ª—É—á–∞–µ–º —Å—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥

                        try {
                            // –ü–æ–ª—É—á–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞ –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ API
                            assert guild != null;
                            Member psychologist = guild.retrieveMemberById(id).complete();

                            if (psychologist != null) {
                                embedBuilder.addField(
                                        "‚≠ê " + psychologist.getEffectiveName(),
                                        String.format("üìä –°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥: %.2f\n\uD83D\uDDF3\uFE0F –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ü–µ–Ω–æ–∫: %d\n\uD83D\uDD12 –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫—Ä—ã—Ç—ã—Ö —Ç–∏–∫–µ—Ç–æ–≤: %d", averageRating, reviewCount, closeTicketsCount),
                                        false
                                );
                            } else {
                                embedBuilder.addField(
                                        "–ü—Å–∏—Ö–æ–ª–æ–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω",
                                        String.format("ID: %s\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ü–µ–Ω–æ–∫: %d", id, reviewCount),
                                        false
                                );
                            }
                        } catch (Exception e) {
                            logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –ø—Å–∏—Ö–æ–ª–æ–≥–µ —Å ID " + id + ": " + e.getMessage());
                            embedBuilder.addField(
                                    "–ü—Å–∏—Ö–æ–ª–æ–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω",
                                    String.format("ID: %s\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ü–µ–Ω–æ–∫: %d", id, reviewCount),
                                    false
                            );
                        }
                    });

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —ç–º–±–µ–¥-—Å–æ–æ–±—â–µ–Ω–∏–µ
            event.replyEmbeds(embedBuilder.build()).setEphemeral(true).queue();
        }
    }
}
