package org.Psyholog.CheakPsyholog;

import net.dv8tion.jda.api.EmbedBuilder;
import net.dv8tion.jda.api.entities.Guild;
import net.dv8tion.jda.api.entities.Member;
import net.dv8tion.jda.api.events.interaction.command.SlashCommandInteractionEvent;
import net.dv8tion.jda.api.hooks.ListenerAdapter;
import org.Psyholog.Ticket.DataStorage;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.Map;

public class TopPsyhologCommand extends ListenerAdapter {
    private static final Logger logger = LoggerFactory.getLogger(TopPsyhologCommand.class);

    @Override
    public void onSlashCommandInteraction(SlashCommandInteractionEvent event) {
        if (event.getName().equals("top")) {
            Guild guild = event.getGuild();
            Map<String, Double> psychologistCounters = DataStorage.getInstance().getPsychologistCounters();

            // –°–æ–∑–¥–∞–µ–º —ç–º–±–µ–¥-—Å–æ–æ–±—â–µ–Ω–∏–µ
            EmbedBuilder embedBuilder = new EmbedBuilder();
            embedBuilder.setTitle("üîπ –¢–æ–ø –ø—Å–∏—Ö–æ–ª–æ–≥–æ–≤");
            embedBuilder.setColor(0x00ADEF);

            psychologistCounters.entrySet().stream()
                    .limit(10)
                    .forEach(entry -> {
                        String id = entry.getKey();

                        try {
                            assert guild != null;
                            Member psychologist = guild.retrieveMemberById(id).complete();
                            Double averageRating = DataStorage.getInstance().getAverageRating(id);
                            Integer ratingCount = DataStorage.getInstance().getCountOfRatings(id);
                            Integer closedTickets = DataStorage.getInstance().getClosedTicketCount(id);

                            if (psychologist != null) {
                                embedBuilder.addField(
                                        "‚≠ê " + psychologist.getEffectiveName(),
                                        String.format(
                                                "\uD83D\uDCCA –°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥: %.2f\n" +
                                                        "\uD83D\uDDF3\uFE0F –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ü–µ–Ω–æ–∫: %d\n" +
                                                        "\uD83D\uDD12 –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫—Ä—ã—Ç—ã—Ö —Ç–∏–∫–µ—Ç–æ–≤: %d",
                                                averageRating, ratingCount, closedTickets),
                                        false
                                );
                            } else {
                                embedBuilder.addField(
                                        "–ü—Å–∏—Ö–æ–ª–æ–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω",
                                        String.format("ID: %s", id),
                                        false
                                );
                            }
                        } catch (Exception e) {
                            logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –ø—Å–∏—Ö–æ–ª–æ–≥–µ —Å ID " + id + ": " + e.getMessage());
                            embedBuilder.addField(
                                    "–ü—Å–∏—Ö–æ–ª–æ–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω",
                                    String.format("ID: %s", id),
                                    false
                            );
                        }
                    });

            event.replyEmbeds(embedBuilder.build()).setEphemeral(true).queue();
        }
    }
}
