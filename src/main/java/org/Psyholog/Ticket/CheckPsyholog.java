package org.Psyholog.Ticket;

import io.github.cdimascio.dotenv.Dotenv;
import net.dv8tion.jda.api.EmbedBuilder;
import net.dv8tion.jda.api.entities.Guild;
import net.dv8tion.jda.api.entities.Member;
import net.dv8tion.jda.api.entities.Role;
import net.dv8tion.jda.api.events.interaction.command.SlashCommandInteractionEvent;
import net.dv8tion.jda.api.hooks.ListenerAdapter;

import java.awt.*;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;


public class CheckPsyholog extends ListenerAdapter {
    @Override
    public void onSlashCommandInteraction(SlashCommandInteractionEvent event) {
        if (event.getName().equals("rating")) {
            Guild guild = event.getGuild();
            // –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä–æ–∫—É —Å ID –ø—Å–∏—Ö–æ–ª–æ–≥–∞ –∏ —É–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã
            String psyholog = event.getOption("name").getAsString().replaceAll("[<@>]", "");

            Member member = guild.getMemberById(psyholog);
            if (member == null) {
                event.reply("–ü—Å–∏—Ö–æ–ª–æ–≥ —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω.").setEphemeral(true).queue();
                return;
            }

            Role role = guild.getRoleById(Dotenv.load().get("psyhologRole"));

            if (member.getRoles().contains(role)){
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ ID –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —á–∏—Å–ª–æ–≤–æ–π
                if (!psyholog.matches("\\d+")) {
                    event.reply("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –ø—Å–∏—Ö–æ–ª–æ–≥–∞.").setEphemeral(true).queue();
                    return;
                }

                String averageRating = String.format("%.2f", DataStorage.getInstance().getAverageRating(psyholog));

                EmbedBuilder embed = new EmbedBuilder();

                embed.setTitle("üéì –°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª –ø—Å–∏—Ö–æ–ª–æ–≥–∞");
                embed.setDescription("üîπ –ü—Å–∏—Ö–æ–ª–æ–≥: **" + member.getEffectiveName() + "**\n"
                        + "üìä –°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª: **" + averageRating + "**");
                embed.setColor(0x00ADEF);  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ü–≤–µ—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å–∏–Ω–∏–π)
                embed.setThumbnail(member.getEffectiveAvatarUrl());
                embed.build();

                event.replyEmbeds(embed.build()).setEphemeral(true).queue();
            }else {
                event.reply("–£ —ç—Ç–æ–≥–æ —é–∑–µ—Ä–∞ –Ω–µ—Ç—É —Ä–æ–ª–∏ –ø—Å–∏—Ö–æ–ª–æ–≥–∞").setEphemeral(true).queue();
            }
        }
        if (event.getName().equals("top")) {
            Guild guild = event.getGuild();
            Map<String, List<Integer>> psychologistRatings = DataStorage.getInstance().getPsychologistRatings();

            // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Å–∏—Ö–æ–ª–æ–≥–∞ –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Å—Ä–µ–¥–Ω–µ–º—É –±–∞–ª–ª—É
            Map<String, Double> sortedPsychologists = psychologistRatings.entrySet().stream()
                    .sorted((entry1, entry2) -> Double.compare(
                            DataStorage.getInstance().getAverageRating(entry2.getKey()),  // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å—Ä–µ–¥–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∏
                            DataStorage.getInstance().getAverageRating(entry1.getKey())
                    ))
                    .collect(
                            Collectors.toMap(
                                    Map.Entry::getKey,  // –ö–ª—é—á ‚Äî —ç—Ç–æ ID –ø—Å–∏—Ö–æ–ª–æ–≥–∞
                                    entry -> DataStorage.getInstance().getAverageRating(entry.getKey()),  // –ó–Ω–∞—á–µ–Ω–∏–µ ‚Äî —ç—Ç–æ —Å—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥
                                    (e1, e2) -> e1,  // –ù–∞ —Å–ª—É—á–∞–π –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
                                    LinkedHashMap::new // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Ä—è–¥–æ–∫ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
                            )
                    );

            // –°–æ–∑–¥–∞–µ–º —ç–º–±–µ–¥-—Å–æ–æ–±—â–µ–Ω–∏–µ
            EmbedBuilder embedBuilder = new EmbedBuilder();
            embedBuilder.setTitle("–¢–æ–ø –ø—Å–∏—Ö–æ–ª–æ–≥–æ–≤");
            embedBuilder.setColor(0x00ADEF);

            sortedPsychologists.entrySet().stream()
                    .limit(10)
                    .forEach(entry -> {
                        String id = entry.getKey();
                        Double averageRating = entry.getValue();
                        Member psychologist = guild.getMemberById(id);  // –ü–æ–ª—É—á–∞–µ–º —á–ª–µ–Ω–∞ –≥–∏–ª—å–¥–∏–∏ –ø–æ ID –ø—Å–∏—Ö–æ–ª–æ–≥–∞
                        if (psychologist != null) { // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Å–∏—Ö–æ–ª–æ–≥ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                            embedBuilder.addField(psychologist.getEffectiveName(), String.format("–°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥: %.2f", averageRating), false);
                        } else {
                            System.out.println("–ü—Å–∏—Ö–æ–ª–æ–≥ —Å ID " + id + " –Ω–µ –Ω–∞–π–¥–µ–Ω!"); // –û—Ç–ª–∞–¥–∫–∞
                            embedBuilder.addField("–ü—Å–∏—Ö–æ–ª–æ–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω", "ID: " + id, false); // –ï—Å–ª–∏ –ø—Å–∏—Ö–æ–ª–æ–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω
                        }
                    });

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —ç–º–±–µ–¥-—Å–æ–æ–±—â–µ–Ω–∏–µ
            event.replyEmbeds(embedBuilder.build()).setEphemeral(true).queue();
        }
    }
}
