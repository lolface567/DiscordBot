package org.Psyholog.Ticket;

import io.github.cdimascio.dotenv.Dotenv;
import net.dv8tion.jda.api.EmbedBuilder;
import net.dv8tion.jda.api.Permission;
import net.dv8tion.jda.api.entities.Guild;
import net.dv8tion.jda.api.entities.Member;
import net.dv8tion.jda.api.entities.Role;
import net.dv8tion.jda.api.entities.channel.concrete.Category;
import net.dv8tion.jda.api.entities.channel.concrete.TextChannel;
import net.dv8tion.jda.api.entities.emoji.Emoji;
import net.dv8tion.jda.api.events.interaction.ModalInteractionEvent;
import net.dv8tion.jda.api.hooks.ListenerAdapter;
import net.dv8tion.jda.api.interactions.components.buttons.Button;

import java.awt.*;
import java.time.Instant;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;

public class CreateTicket extends ListenerAdapter {

    public static Map<String, String> userActiveTicketsMemory = new HashMap<>();
    public static final ScheduledExecutorService scheduler = Executors.newScheduledThreadPool(1);
    public static final String feedbackChannel = Dotenv.load().get("feedbackChannel");
    public static final String adminChannel = Dotenv.load().get("adminChannel");
    public static final String ticketCategory = Dotenv.load().get("ticketCategory");
    public static final String psyhologRole = Dotenv.load().get("psyhologRole");
    public static final String closeTicketCategory = Dotenv.load().get("closeTicketCategory");
    public static final String voiceCategory = Dotenv.load().get("voiceCategory");


    public static void execute(ModalInteractionEvent event, String type, String age, String descriptionInput, String timeZone) {
        Guild guild = event.getGuild();
        if (guild == null) {
            event.reply("–û—à–∏–±–∫–∞: –≥–∏–ª—å–¥–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.").setEphemeral(true).queue();
            return;
        }

        Category category = guild.getCategoryById(ticketCategory);
        Member member = event.getMember();

        if (member == null) {
            event.reply("–û—à–∏–±–∫–∞: —É—á–∞—Å—Ç–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.").setEphemeral(true).queue();
            return;
        }

        if (userActiveTicketsMemory.containsKey(member.getId())) {
            event.reply("–í—ã —É–∂–µ –∏–º–µ–µ—Ç–µ –∞–∫—Ç–∏–≤–Ω—ã–π —Ç–∏–∫–µ—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≤–µ—Ä—à–∏—Ç–µ –µ–≥–æ, –ø—Ä–µ–∂–¥–µ —á–µ–º —Å–æ–∑–¥–∞–≤–∞—Ç—å –Ω–æ–≤—ã–π.").setEphemeral(true).queue();
            return;
        }

        if (category == null) {
            event.reply("–û—à–∏–±–∫–∞: –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.").setEphemeral(true).queue();
            return;
        }

        DataStorage.getInstance().incrementTicketCounter();
        String ticketNumber = String.valueOf(DataStorage.getInstance().getTicketCounter());
        String ticketName = "ticket-" + ticketNumber;
        DataStorage.getInstance().saveData();

        guild.createTextChannel(ticketName, category)
                .addPermissionOverride(member, EnumSet.of(Permission.VIEW_CHANNEL), null)
                .addPermissionOverride(guild.getPublicRole(), null, EnumSet.of(Permission.VIEW_CHANNEL))
                .queue(textChannel -> {
                    DataStorage.getInstance().getTicketChannelMap().put(ticketNumber, textChannel.getId());
                    DataStorage.getInstance().getUserActiveTickets().put(textChannel.getId(), member.getId()); // Mark this ticket as active for the user
                    userActiveTicketsMemory.put(member.getId(), textChannel.getId()); // –¥–æ–±–∞–≤–ª—è–µ—Ç —é–∑–µ—Ä–∞ –≤ –±–∞–Ω –ª–∏—Å—Ç
                    DataStorage.getInstance().getTicketDes().put(ticketNumber, descriptionInput);
                    DataStorage.getInstance().saveData(); // Save data to file

                    TextChannel textChannelAdmin = guild.getTextChannelById(adminChannel);

                    Role role = guild.getRoleById(psyhologRole);

                    EmbedBuilder embedBuilder = new EmbedBuilder();
                    embedBuilder
                            .setTitle("üÜï –ù–æ–≤–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ")
                            .setColor(Color.DARK_GRAY)
                            .setDescription("–ü–æ—Å—Ç—É–ø–∏–ª–æ –Ω–æ–≤–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ. –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –Ω–∏–∂–µ:")
                            .addField("üìÇ –¢–∏–ø:", type, false)
                            .addField("üéÇ –í–æ–∑—Ä–∞—Å—Ç:", age, false)
                            .addField("üìù –û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã:", DataStorage.getInstance().getTicketDes().get(ticketNumber), false)
                            .addField("\uD83D\uDD5D –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å:", timeZone, false)
                            .addField("üìÑ Ticket ID", ticketName, false)
                            .setFooter("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç " + member.getEffectiveName(), member.getUser().getAvatarUrl())
                            .setTimestamp(Instant.now());

                    EmbedBuilder embedBuilder1 = new EmbedBuilder()
                            .setColor(Color.DARK_GRAY)
                            .setTitle("‚è≥ –û–∂–∏–¥–∞–π—Ç–µ")
                            .setDescription("–ú—ã –Ω–∞—Ö–æ–¥–∏–º—Å—è –≤ –ø–æ–∏—Å–∫–µ –ø—Å–∏—Ö–æ–ª–æ–≥–∞ –¥–ª—è –≤–∞—Å...")
                            .setFooter("–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–µ —Ç–µ—Ä–ø–µ–Ω–∏–µ")
                            .setTimestamp(Instant.now());

                    textChannel.sendMessageEmbeds(embedBuilder.build()).queue();
                    textChannel.sendMessage(member.getAsMention()).queue();
                    textChannel.sendMessageEmbeds(embedBuilder1.build()).queue();

                    if (textChannelAdmin != null) {  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏
                        textChannelAdmin.sendMessage(role.getAsMention())
                                .setEmbeds(embedBuilder.build())
                                .setActionRow(
                                        Button.success("take-ticket:" + ticketNumber + ":" + ticketName, "–í–∑—è—Ç—å —Ç–∏–∫–µ—Ç")
                                                .withEmoji(Emoji.fromUnicode("\uD83D\uDCE5") // Add ticket ID to the button ID
                                                )).queue();
                    }
                    System.out.println("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å " + member.getEffectiveName() + " —Å–æ–∑–¥–∞–ª —Ç–∏–∫–µ—Ç!");
                });
    }
}