package org.Psyholog.Ticket;

import io.github.cdimascio.dotenv.Dotenv;
import net.dv8tion.jda.api.EmbedBuilder;
import net.dv8tion.jda.api.Permission;
import net.dv8tion.jda.api.entities.*;
import net.dv8tion.jda.api.entities.channel.concrete.Category;
import net.dv8tion.jda.api.entities.channel.concrete.TextChannel;
import net.dv8tion.jda.api.entities.emoji.Emoji;
import net.dv8tion.jda.api.events.channel.ChannelDeleteEvent;
import net.dv8tion.jda.api.events.guild.GuildLeaveEvent;
import net.dv8tion.jda.api.events.guild.member.GuildMemberRemoveEvent;
import net.dv8tion.jda.api.events.interaction.ModalInteractionEvent;
import net.dv8tion.jda.api.events.interaction.component.ButtonInteractionEvent;
import net.dv8tion.jda.api.hooks.ListenerAdapter;
import net.dv8tion.jda.api.interactions.components.ActionRow;
import net.dv8tion.jda.api.interactions.components.buttons.Button;
import net.dv8tion.jda.api.interactions.components.text.TextInput;
import net.dv8tion.jda.api.interactions.components.text.TextInputStyle;
import net.dv8tion.jda.api.interactions.modals.Modal;


import java.awt.*;
import java.time.Instant;
import java.util.*;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.TimeUnit;

import static org.Psyholog.Ticket.MenuButtons.userActiveVoiceMapMemory;
import static org.Psyholog.Ticket.MenuButtons.userActiveVoiceMemory;

public class CreateSys extends ListenerAdapter {

    public static Map<String, String> userActiveTicketsMemory = new HashMap<>();
    public static final ScheduledExecutorService scheduler = Executors.newScheduledThreadPool(1);
    public static final String feedbackChannel = Dotenv.load().get("feedbackChannel");
    public static final String adminChannel = Dotenv.load().get("adminChannel");
    public static final String ticketCategory = Dotenv.load().get("ticketCategory");
    public static final String psyhologRole = Dotenv.load().get("psyhologRole");
    public static final String closeTicketCategory = Dotenv.load().get("closeTicketCategory");
    public static final String voiceCategory = Dotenv.load().get("voiceCategory");


    public static void execute(ModalInteractionEvent event, String type, String age, String descriptionInput, String timeZone) {
        Guild guild = event.getGuild();
        if (guild == null) {
            event.reply("–û—à–∏–±–∫–∞: –≥–∏–ª—å–¥–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.").setEphemeral(true).queue();
            return;
        }

        Category category = guild.getCategoryById(ticketCategory);
        Member member = event.getMember();

        if (member == null) {
            event.reply("–û—à–∏–±–∫–∞: —É—á–∞—Å—Ç–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.").setEphemeral(true).queue();
            return;
        }

        if (userActiveTicketsMemory.containsKey(member.getId())) {
            event.reply("–í—ã —É–∂–µ –∏–º–µ–µ—Ç–µ –∞–∫—Ç–∏–≤–Ω—ã–π —Ç–∏–∫–µ—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≤–µ—Ä—à–∏—Ç–µ –µ–≥–æ, –ø—Ä–µ–∂–¥–µ —á–µ–º —Å–æ–∑–¥–∞–≤–∞—Ç—å –Ω–æ–≤—ã–π.").setEphemeral(true).queue();
            return;
        }

        if (category == null) {
            event.reply("–û—à–∏–±–∫–∞: –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.").setEphemeral(true).queue();
            return;
        }

        DataStorage.getInstance().incrementTicketCounter();
        String ticketNumber = String.valueOf(DataStorage.getInstance().getTicketCounter());
        String ticketName = "ticket-" + ticketNumber;
        DataStorage.getInstance().saveData();

        guild.createTextChannel(ticketName, category)
                .addPermissionOverride(member, EnumSet.of(Permission.VIEW_CHANNEL), null)
                .addPermissionOverride(guild.getPublicRole(), null, EnumSet.of(Permission.VIEW_CHANNEL))
                .queue(textChannel -> {
                    DataStorage.getInstance().getTicketChannelMap().put(ticketNumber, textChannel.getId());
                    DataStorage.getInstance().getUserActiveTickets().put(textChannel.getId(), member.getId()); // Mark this ticket as active for the user
                    userActiveTicketsMemory.put(member.getId(), textChannel.getId()); // –¥–æ–±–∞–≤–ª—è–µ—Ç —é–∑–µ—Ä–∞ –≤ –±–∞–Ω –ª–∏—Å—Ç
                    DataStorage.getInstance().getTicketDes().put(ticketNumber, descriptionInput);
                    DataStorage.getInstance().saveData(); // Save data to file

                    TextChannel textChannelAdmin = guild.getTextChannelById(adminChannel);

                    Role role = guild.getRoleById(psyhologRole);

                    EmbedBuilder embedBuilder = new EmbedBuilder();
                    embedBuilder
                            .setTitle("üÜï –ù–æ–≤–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ")
                            .setColor(Color.DARK_GRAY)
                            .setDescription("–ü–æ—Å—Ç—É–ø–∏–ª–æ –Ω–æ–≤–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ. –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –Ω–∏–∂–µ:")
                            .addField("üìÇ –¢–∏–ø:", type, false)
                            .addField("üéÇ –í–æ–∑—Ä–∞—Å—Ç:", age, false)
                            .addField("üìù –û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã:", DataStorage.getInstance().getTicketDes().get(ticketNumber), false)
                            .addField("\uD83D\uDD5D –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å:", timeZone, false)
                            .addField("üìÑ Ticket ID", ticketName, false)
                            .setFooter("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç " + member.getEffectiveName(), member.getUser().getAvatarUrl())
                            .setTimestamp(Instant.now());

                    EmbedBuilder embedBuilder1 = new EmbedBuilder()
                            .setColor(Color.DARK_GRAY)
                            .setTitle("‚è≥ –û–∂–∏–¥–∞–π—Ç–µ")
                            .setDescription("–ú—ã –Ω–∞—Ö–æ–¥–∏–º—Å—è –≤ –ø–æ–∏—Å–∫–µ –ø—Å–∏—Ö–æ–ª–æ–≥–∞ –¥–ª—è –≤–∞—Å...")
                            .setFooter("–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–µ —Ç–µ—Ä–ø–µ–Ω–∏–µ")
                            .setTimestamp(Instant.now());

                    textChannel.sendMessageEmbeds(embedBuilder.build()).queue();
                    textChannel.sendMessage(member.getAsMention()).queue();
                    textChannel.sendMessageEmbeds(embedBuilder1.build()).queue();

                    if (textChannelAdmin != null) {  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏
                        textChannelAdmin.sendMessage(role.getAsMention())
                                .setEmbeds(embedBuilder.build())
                                .setActionRow(
                                        Button.success("take-ticket:" + ticketNumber + ":" + ticketName, "–í–∑—è—Ç—å —Ç–∏–∫–µ—Ç")
                                                .withEmoji(Emoji.fromUnicode("\uD83D\uDCE5") // Add ticket ID to the button ID
                                                )).queue();
                    }
                });
    }

    @Override
    public void onChannelDelete(ChannelDeleteEvent event) { // –ï—Å–ª–∏ –ø–∫–º–æ–º —É–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª
        String textChannel = event.getChannel().getId();
        if (DataStorage.getInstance().getTicketChannelMap().containsValue(textChannel)) {
            DataStorage.getInstance().getClosedTickets().add(textChannel);
            String user = DataStorage.getInstance().getUserActiveTickets().get(textChannel);
            CreateSys.userActiveTicketsMemory.remove(user);
            DataStorage.getInstance().getTicketPsychologists().remove(textChannel);
            DataStorage.getInstance().getTicketChannelMap().remove(textChannel);
            DataStorage.getInstance().getUserActiveTickets().remove(textChannel);
            DataStorage.getInstance().saveData();
        }
        if (userActiveVoiceMapMemory.containsKey(textChannel)) {  // –ï—Å–ª–∏ –ø–∫–º–æ–º —É–¥–∞–ª–∏—Ç—å –≤–æ–π—Å —Å–æ–∑–¥–∞–Ω—ã–π —á–µ—Ä–µ–∑ –º–µ–Ω—é
            String user = userActiveVoiceMapMemory.get(textChannel);
            userActiveVoiceMemory.remove(user);
            userActiveVoiceMapMemory.remove(textChannel);
        }
    }

    @Override
    public void onGuildMemberRemove(GuildMemberRemoveEvent event) { // –ï—Å–ª–∏ —á—É–±—Ä–∏–∫ –ª–∏–≤–Ω—É–ª —Å –∞–∫—Ç–∏–≤–Ω—ã–º —Ç–∏–∫–µ—Ç–æ–º –ù–£–ñ–ù–û –ü–†–û–í–ï–†–ò–¢–¨ –≠–¢–û–¢ –ö–û–î
        Member leavMember = event.getMember();  // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        if (leavMember == null) {
            System.out.println("Member object is null, possibly due to member already leaving the server.");
            return; // –í—ã—Ö–æ–¥, –µ—Å–ª–∏ –Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        }

        String stringMember = leavMember.getId();
        Guild guild = event.getGuild();

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç–∏–∫–µ—Ç—ã —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if (DataStorage.getInstance().getUserActiveTickets().containsValue(stringMember)) {
            TextChannel textChannel = guild.getTextChannelById(userActiveTicketsMemory.get(stringMember));

            if (textChannel != null) { // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–∞–Ω–∞–ª –Ω–µ null
                EmbedBuilder embedBuilder1 = new EmbedBuilder()
                        .setColor(Color.RED)
                        .setTitle("\uD83D\uDCA2 –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–∫–∏–Ω—É–ª —Å–µ—Ä–≤–µ—Ä")
                        .setDescription("–ú–æ–∂–Ω–æ –∑–∞–∫—Ä—ã—Ç—å —Ç–∏–∫–µ—Ç, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–∫–∏–Ω—É–ª —Å–µ—Ä–≤–µ—Ä")
                        .setFooter("–§–∞—Ä—Ç—É –º–∞—Å—Ç–∏")
                        .setTimestamp(Instant.now());

                textChannel.sendMessageEmbeds(embedBuilder1.build()).queue();

                // –£–¥–∞–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —Ç–∏–∫–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                DataStorage.getInstance().getUserActiveTickets().remove(textChannel.getId());
                userActiveTicketsMemory.remove(stringMember);
            } else {
                System.out.println("–¢–µ–∫—Å—Ç–æ–≤—ã–π –∫–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.");
            }
        }
        // –ë–∞–Ω–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ 10 –¥–Ω–µ–π
        guild.ban(leavMember, 0, TimeUnit.DAYS).queue(
                success -> System.out.println("–Æ–∑–µ—Ä –∑–∞–±–∞–Ω–µ–Ω"),
                error -> System.err.println("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: " + error.getMessage())
        );
    }

    @Override
    public void onButtonInteraction(ButtonInteractionEvent event) {   // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –≤–∑—è—Ç—å —Ç–∏–∫–µ—Ç
        if (event.getButton().getId().startsWith("take-ticket:")) {
            String[] parts = event.getButton().getId().split(":");
            String ticketNumber = parts[1];
            String ticketName = parts[2];
            String ticketId = DataStorage.getInstance().getTicketChannelMap().get(ticketNumber);


            Guild guild = event.getGuild();
            if (guild == null) {
                event.reply("–û—à–∏–±–∫–∞: –≥–∏–ª—å–¥–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.").setEphemeral(true).queue();
                return;
            }

            if (DataStorage.getInstance().getClosedTickets().contains(ticketId)) {
                event.reply("–û—à–∏–±–∫–∞: —Ç–∏–∫–µ—Ç —É–∂–µ –∑–∞–∫—Ä—ã—Ç").setEphemeral(true).queue();
                return;
            }

            Member member = event.getMember();
            if (member == null) {
                event.reply("–û—à–∏–±–∫–∞: —É—á–∞—Å—Ç–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.").setEphemeral(true).queue();
                return;
            }

            System.out.println(member.getId() + " –≤–∑—è–ª —Ç–∏–∫–µ—Ç " + ticketId);

            TextChannel textChannel = guild.getTextChannelById(ticketId);
            Member user = guild.getMemberById(DataStorage.getInstance().getUserActiveTickets().get(ticketId));

            if (user == null) {
                event.editComponents(
                        ActionRow.of(
                                Button.danger("taken-ticket", "–¢–∏–∫–µ—Ç –±—ã–ª –∑–∞–∫—Ä—ã—Ç, —é–∑–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω").asDisabled().withEmoji(Emoji.fromUnicode("‚ùå")),
                                Button.link(textChannel.getJumpUrl(), "–ü–µ—Ä–µ–π—Ç–∏ –∫ —Ç–∏–∫–µ—Ç—É")
                        )
                ).queue();
                scheduler.schedule(() -> {
                    event.getMessage().delete().queue();
                }, 10, TimeUnit.MINUTES);

                DataStorage.getInstance().getClosedTickets().add(ticketId);
                userActiveTicketsMemory.remove(user);
                DataStorage.getInstance().getUserActiveTickets().remove(textChannel.getId());
                DataStorage.getInstance().getTicketDes().remove(ticketId);
                DataStorage.getInstance().saveData();

                textChannel.delete().queue();
                return;
            }

            if (textChannel != null) {
                String newChannelName = ticketName + "-" + member.getEffectiveName();
                textChannel.getManager().setName(newChannelName).queue(
                        success -> {
                            event.editComponents(
                                    ActionRow.of(
                                            Button.danger("taken-ticket", "–í–∑—è–ª: " + member.getEffectiveName()).asDisabled()
                                                    .withEmoji(Emoji.fromUnicode("‚úÖ")),
                                            Button.link(textChannel.getJumpUrl(), "–ü–µ—Ä–µ–π—Ç–∏ –∫ —Ç–∏–∫–µ—Ç—É")
                                    )
                            ).queue();

                            scheduler.schedule(() -> {
                                event.getMessage().delete().queue();
                            }, 10, TimeUnit.MINUTES);
                        },
                        error -> event.reply("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–º–µ–Ω–∏ –∫–∞–Ω–∞–ª–∞: " + error.getMessage()).setEphemeral(true).queue()
                );

                Role psychologistRole = guild.getRoleById(CreateSys.psyhologRole);
                if (psychologistRole == null) {
                    event.reply("–û—à–∏–±–∫–∞: —Ä–æ–ª—å –ø—Å–∏—Ö–æ–ª–æ–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.").setEphemeral(true).queue();
                    return;
                }

                DataStorage.getInstance().getTicketPsychologists().put(ticketNumber, member.getId());
                DataStorage.getInstance().saveData();

                // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–∞
                PermissionOverride existingPermission = textChannel.getPermissionOverride(member);

                if (existingPermission != null) {
                    // –ï—Å–ª–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ
                    existingPermission.getManager()
                            .grant(EnumSet.of(Permission.VIEW_CHANNEL))
                            .queue(
                                    success -> System.out.println("–ü—Ä–∞–≤–∞ –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã."),
                                    error -> System.err.println("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–∞–≤ –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–∞: " + error.getMessage())
                            );
                } else {
                    // –ï—Å–ª–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ
                    textChannel.upsertPermissionOverride(member)
                            .setAllowed(EnumSet.of(Permission.VIEW_CHANNEL))
                            .queue(
                                    success -> System.out.println("–ü—Ä–∞–≤–∞ –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–∞ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã."),
                                    error -> System.err.println("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –ø—Ä–∞–≤ –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–∞: " + error.getMessage())
                            );
                }

                EmbedBuilder embedBuilder = new EmbedBuilder()
                        .setColor(Color.DARK_GRAY)
                        .setTitle("üéâ –ü—Å–∏—Ö–æ–ª–æ–≥ –Ω–∞–π–¥–µ–Ω!")
                        .setDescription("–í–∞—à –ø—Å–∏—Ö–æ–ª–æ–≥: " + member.getAsMention())
                        .addField("‚ú® –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞", "–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –æ–±—Å—É–∂–¥–µ–Ω–∏–µ.", false)
                        .setFooter("–ú—ã –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å –≤–∞–º!")
                        .setTimestamp(Instant.now());
                textChannel.sendMessageEmbeds(embedBuilder.build()).queue();
            } else {
                event.reply("–û—à–∏–±–∫–∞: –∫–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.").setEphemeral(true).queue();
            }
        }
        if (event.getButton().getId().startsWith("feedback:")) { // Check for feedback button with ticket ID
            String ticketId = event.getButton().getId().split(":")[1]; // Extract ticket ID from button ID
            TextInput descriptionInput = TextInput.create("body", "–û—Ç–∑—ã–≤", TextInputStyle.PARAGRAPH)
                    .setPlaceholder("–ù–∞–ø–∏—à–∏—Ç–µ –í–∞—à –æ—Ç–∑—ã–≤")
                    .setMinLength(5)
                    .setMaxLength(1000)
                    .build();

            TextInput ratingInput = TextInput.create("steamId", "–û—Ü–µ–Ω–∫–∞ –¥–æ 10", TextInputStyle.SHORT)
                    .setPlaceholder("–í–∞—à–∞ –æ—Ü–µ–Ω–∫–∞")
                    .build();

            Modal modalBug = Modal.create("feedback:" + ticketId, "–ù–∞–ø–∏—à–∏—Ç–µ –∫—Ä–∞—Ç–∫–∏–π –æ—Ç–∑—ã–≤") // Add ticket ID to modal ID
                    .addComponents(ActionRow.of(ratingInput), ActionRow.of(descriptionInput))
                    .build();

            event.replyModal(modalBug).queue();
        }
    }
}