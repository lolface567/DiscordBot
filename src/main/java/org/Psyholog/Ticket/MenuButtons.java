package org.Psyholog.Ticket;

import net.dv8tion.jda.api.EmbedBuilder;
import net.dv8tion.jda.api.Permission;
import net.dv8tion.jda.api.entities.Guild;
import net.dv8tion.jda.api.entities.Member;
import net.dv8tion.jda.api.entities.PermissionOverride;
import net.dv8tion.jda.api.entities.Role;
import net.dv8tion.jda.api.entities.channel.concrete.Category;
import net.dv8tion.jda.api.entities.channel.concrete.TextChannel;
import net.dv8tion.jda.api.entities.channel.concrete.VoiceChannel;
import net.dv8tion.jda.api.entities.emoji.Emoji;
import net.dv8tion.jda.api.events.interaction.component.ButtonInteractionEvent;
import net.dv8tion.jda.api.hooks.ListenerAdapter;
import net.dv8tion.jda.api.interactions.components.ActionRow;
import net.dv8tion.jda.api.interactions.components.buttons.Button;
import net.dv8tion.jda.api.interactions.components.text.TextInput;
import net.dv8tion.jda.api.interactions.components.text.TextInputStyle;
import net.dv8tion.jda.api.interactions.modals.Modal;

import java.awt.*;
import java.time.Instant;
import java.util.*;

import static org.Psyholog.Ticket.CreateSys.*;

public class MenuButtons extends ListenerAdapter {
    public static Set<String> userActiveVoiceMemory = new HashSet<>();
    public static Map<String, String> userActiveVoiceMapMemory = new HashMap<>();

    @Override
    public void onButtonInteraction(ButtonInteractionEvent event) {
        if (event.getButton().getId().startsWith("close-ticket:")) {
            String[] parts = event.getButton().getId().split(":");
            String ticketId = parts[1];
            String ticketName = parts[2];
            String[] cahnel = ticketName.split("-");
            String ticketIdname = cahnel[1];

            if (ticketId == null) {
                event.reply("–û—à–∏–±–∫–∞: —Ç–∏–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.").setEphemeral(true).queue();
                return;
            }

            Member member = event.getMember();
            if (member == null) {
                event.reply("–û—à–∏–±–∫–∞: –º–µ–º–±–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.").setEphemeral(true).queue();
            }

            Guild guild = event.getGuild();
            if (guild == null) {
                event.reply("–û—à–∏–±–∫–∞: –≥–∏–ª—å–¥–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.").setEphemeral(true).queue();
                return;
            }

            Role role = guild.getRoleById(psyhologRole);
            if (role == null) {
                event.reply("–û—à–∏–±–∫–∞: —Ä–æ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.").setEphemeral(true).queue();
                return;
            }

            if (member.getRoles().contains(role)) {
                if (DataStorage.getInstance().getClosedTickets().contains(ticketId)) {
                    event.getHook().sendMessage("–û—à–∏–±–∫–∞: —Ç–∏–∫–µ—Ç —É–∂–µ –∑–∞–∫—Ä—ã—Ç.").setEphemeral(true).queue();
                    return;
                }

                TextChannel textChannel = guild.getTextChannelById(ticketId);
                Category category = guild.getCategoryById(closeTicketCategory);
                String user = DataStorage.getInstance().getUserActiveTickets().get(ticketId);
                Member chel = guild.getMemberById(user);

                System.out.println(chel.getEffectiveName());

                if (textChannel != null) {
                    textChannel.getManager().setParent(category).queue(
                            success -> {
                                event.editComponents(
                                        ActionRow.of(
                                                Button.danger("closed-ticket", "–¢–∏–∫–µ—Ç –∑–∞–∫—Ä—ã–ª: " + member.getEffectiveName()).withEmoji(Emoji.fromUnicode("\uD83D\uDD8D\uFE0F")).asDisabled()
                                        )).queue();
                            });
                    // –¢–æ—á–∫–∞, –≥–¥–µ —Ç–∏–∫–µ—Ç –ø–æ–º–µ—á–∞–µ—Ç—Å—è –∑–∞–∫—Ä—ã—Ç—ã–º:
                    DataStorage.getInstance().getClosedTickets().add(ticketId);
                    DataStorage.getInstance().getTicketDes().remove(ticketIdname);
                    try {
                        CreateSys.userActiveTicketsMemory.remove(user);
                    } catch (Exception e) {
                        throw new RuntimeException(e);
                    }
                    try {
                        DataStorage.getInstance().saveData(); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª
                    } catch (Exception e) {
                        throw new RuntimeException(e);
                    }
                    System.out.println("–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã");
                }else {
                    event.reply("–ß—Ç–æ —Ç–æ –Ω–µ —Ç–∞–∫...").setEphemeral(true).queue();
                }

                if (chel != null) {
                    textChannel.upsertPermissionOverride(chel)
                            .setAllowed(Permission.VIEW_CHANNEL)
                            .setDenied(Permission.MESSAGE_SEND);
                } else {
                    System.out.println("–ß–µ–µ–µ–µ–µ–µ–ª –Ω–µ –Ω–∞–π–¥–µ–Ω");
                }

                PermissionOverride rolePermissionOverride = textChannel.getPermissionOverride(role);

                if (rolePermissionOverride != null) {
                    // –ï—Å–ª–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ–±–Ω–æ–≤–∏—Ç–µ –µ–≥–æ
                    rolePermissionOverride.getManager()
                            .setAllowed(EnumSet.of(Permission.VIEW_CHANNEL))
                            .setDenied(EnumSet.of(Permission.MESSAGE_SEND))
                            .queue(
                                    success -> System.out.println("–ü—Ä–∞–≤–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã."),
                                    error -> System.err.println("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–∞–≤: " + error.getMessage())
                            );
                } else {
                    // –ï—Å–ª–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤–æ–µ
                    textChannel.upsertPermissionOverride(role)
                            .setAllowed(EnumSet.of(Permission.VIEW_CHANNEL))
                            .setDenied(EnumSet.of(Permission.MESSAGE_SEND))
                            .queue(
                                    success -> System.out.println("–ü—Ä–∞–≤–∞ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã."),
                                    error -> System.err.println("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –ø—Ä–∞–≤: " + error.getMessage())
                            );
                }

                DataStorage.getInstance().getUserActiveTickets().remove(textChannel.getId());
                DataStorage.getInstance().saveData();

                EmbedBuilder embedBuilder1 = new EmbedBuilder()
                        .setColor(Color.RED)
                        .setTitle("üìõ –í–∞—à —Ç–∏–∫–µ—Ç –∑–∞–∫—Ä—ã—Ç")
                        .setDescription("–¢–∏–∫–µ—Ç –±—ã–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã—Ç. –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ!")
                        .addField("üÜî Ticket ID", ticketName, false)
                        .addField("üë§ –ó–∞–∫—Ä—ã–ª", member.getAsMention(), false)
                        .setFooter("–ó–∞–∫—Ä—ã—Ç–æ", member.getUser().getAvatarUrl()) // –î–æ–±–∞–≤–ª—è–µ–º –∞–≤–∞—Ç–∞—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ñ—É—Ç–µ—Ä
                        .setTimestamp(Instant.now());
                textChannel.sendMessageEmbeds(embedBuilder1.build()).queue();

                EmbedBuilder embedBuilder2 = new EmbedBuilder()
                        .setColor(Color.GREEN)
                        .setTitle("üìù –û—Å—Ç–∞–≤—å—Ç–µ –æ—Ç–∑—ã–≤")
                        .setDescription("–ß—Ç–æ–±—ã –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Å–≤–æ–∏–º –º–Ω–µ–Ω–∏–µ–º, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.")
                        .setFooter("–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤!")
                        .setTimestamp(Instant.now());
                textChannel.sendMessageEmbeds(embedBuilder2.build()).addActionRow(
                        Button.success("feedback:" + ticketIdname, "–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤")
                        .withEmoji(Emoji.fromUnicode("\uD83D\uDC8C"))).queue(); // –î–æ–±–∞–≤–ª—è–µ–º ID —Ç–∏–∫–µ—Ç–∞ –∫ –∫–Ω–æ–ø–∫–µ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏

            } else event.reply("–£ –≤–∞—Å –Ω–µ—Ç—É –ø—Ä–∞–≤").setEphemeral(true).queue();
        } else if (event.getButton().getId().startsWith("change:")) {
            try {
                String ticketName = event.getButton().getId().split(":")[1]; // Extract ticket ID from button ID
                String[] channel = ticketName.split("-");
                if (channel.length < 2) {
                    event.reply("–û—à–∏–±–∫–∞: –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID —Ç–∏–∫–µ—Ç–∞.").setEphemeral(true).queue();
                    return;
                }

                String ticketIdname = channel[1];
                String parseId = DataStorage.getInstance().getTicketChannelMap().get(ticketIdname);

                if (parseId == null) {
                    event.reply("–û—à–∏–±–∫–∞: –¢–∏–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.").setEphemeral(true).queue();
                    return;
                }

                Guild guild = event.getGuild();
                Member member = event.getMember();
                Role psyhologyRole = guild.getRoleById(CreateSys.psyhologRole);
                if (member.getRoles().contains(psyhologyRole)) {

                    TextInput descriptionInput = TextInput.create("why", "–ü—Ä–∏—á–∏–Ω–∞ —Å–º–µ–Ω—ã", TextInputStyle.SHORT)
                            .setPlaceholder("–ü–æ—á–µ–º—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–¥–∞—Ç—å —Ç–∏–∫–µ—Ç?")
                            .setMinLength(1)
                            .setMaxLength(1000)
                            .build();

                    Modal modalChange = Modal.create("changePsyhologModal:" + parseId + ":" + ticketIdname, "–ù–∞–ø–∏—à–∏—Ç–µ –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ") // Add ticket ID to modal ID
                            .addComponents(ActionRow.of(descriptionInput))
                            .build();

                    event.replyModal(modalChange).queue();
                } else {
                    event.reply("–û—à–∏–±–∫–∞: —É –≤–∞—Å –Ω–µ—Ç—É –ø—Ä–∞–≤").setEphemeral(true).queue();
                }
            } catch (Exception e) {
                event.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.").setEphemeral(true).queue();
                e.printStackTrace();
            }
        } else if (event.getButton().getId().startsWith("voice:")) {
            Guild guild = event.getGuild();
            Role role = guild.getRoleById(psyhologRole);
            Member proverka = event.getMember();
            if (role == null) {
                event.reply("–û—à–∏–±–∫–∞: —Ä–æ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.").setEphemeral(true).queue();
                return;
            }
            String ticketName = event.getButton().getId().split(":")[1]; // Extract ticket ID from button ID
            String[] channel = ticketName.split("-");

            if (channel.length < 2) {
                event.reply("–û—à–∏–±–∫–∞: –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID —Ç–∏–∫–µ—Ç–∞.").setEphemeral(true).queue();
                return;
            }

            String ticketIdname = channel[1];
            String ticketId = DataStorage.getInstance().getTicketChannelMap().get(ticketIdname);

            Member psyholog = guild.getMemberById(DataStorage.getInstance().getTicketPsychologists().get(ticketIdname));
            Member user = guild.getMemberById(DataStorage.getInstance().getUserActiveTickets().get(ticketId));

            if (proverka.getRoles().contains(role) && !userActiveVoiceMemory.contains(user.getId())) {
                Category voice = guild.getCategoryById(voiceCategory);
                VoiceChannel newVoiceChannel = guild.createVoiceChannel(user.getEffectiveName() + " –ò " + psyholog.getEffectiveName())
                        .setParent(voice)
                        .addPermissionOverride(guild.getPublicRole(), null, EnumSet.of(Permission.VIEW_CHANNEL, Permission.VOICE_CONNECT))
                        .addPermissionOverride(psyholog, EnumSet.of(Permission.VIEW_CHANNEL, Permission.VOICE_CONNECT), null)
                        .addPermissionOverride(user, EnumSet.of(Permission.VIEW_CHANNEL, Permission.VOICE_CONNECT), null)
                        .complete();
                userActiveVoiceMemory.add(user.getId());
                userActiveVoiceMapMemory.put(newVoiceChannel.getId(), user.getId());

                EmbedBuilder embedBuilder = new EmbedBuilder();
                embedBuilder
                        .setTitle("üÜï –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –≥–æ–ª–æ—Å–æ–≤–æ–π –∫–∞–Ω–∞–ª")
                        .setColor(Color.DARK_GRAY)
                        .setDescription("–≠—Ç–æ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤—ã–º –∫–∞–Ω–∞–ª–æ–º. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.")
                        .setFooter("–í–æ–π—Å –¥–ª—è " + user.getEffectiveName() + " –∏ " + psyholog.getEffectiveName(), null)
                        .setTimestamp(Instant.now());

                newVoiceChannel.sendMessage(user.getAsMention() + " " + psyholog.getAsMention())
                        .setEmbeds(embedBuilder.build())
                        .setActionRow(
                                Button.danger("delvoice:" + newVoiceChannel.getId() + ":" + user.getId(), "–£–¥–∞–ª–∏—Ç—å –≤–æ–π—Å")
                                        .withEmoji(Emoji.fromUnicode("üóë"))
                        )
                        .queue();

                event.reply("–í–æ–π—Å —Å–æ–∑–¥–∞–Ω").setEphemeral(true).queue();
            } else {
                event.reply("–û—à–∏–±–∫–∞: —É –≤–∞—Å —É–∂–µ —Å–æ–∑–¥–∞–Ω –∫–∞–Ω–∞–ª —Å —ç—Ç–∏–º —á–µ–ª–æ–≤–µ–∫–æ–º –∏–ª–∏ –Ω–µ—Ç—É –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–º–∞–Ω–¥—ã").setEphemeral(true).queue();
            }
        } else if (event.getButton().getId().startsWith("delvoice:")) {
            String voiceId = event.getButton().getId().split(":")[1]; // Extract ticket ID from button ID
            String user = event.getButton().getId().split(":")[2]; // Extract ticket ID from button ID

            Guild guild = event.getGuild();

            assert guild != null;
            userActiveVoiceMemory.remove(user);
            userActiveVoiceMapMemory.remove(voiceId);
            guild.getVoiceChannelById(voiceId).delete().queue();
        }
    }
}
