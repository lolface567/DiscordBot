package org.Psyholog.Ticket;

import net.dv8tion.jda.api.EmbedBuilder;
import net.dv8tion.jda.api.entities.Guild;
import net.dv8tion.jda.api.entities.Member;
import net.dv8tion.jda.api.entities.Role;
import net.dv8tion.jda.api.entities.channel.concrete.TextChannel;
import net.dv8tion.jda.api.entities.emoji.Emoji;
import net.dv8tion.jda.api.events.interaction.ModalInteractionEvent;
import net.dv8tion.jda.api.hooks.ListenerAdapter;
import net.dv8tion.jda.api.interactions.components.buttons.Button;

import java.awt.*;
import java.time.Instant;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.TimeUnit;

public class ReTakeTicketOnModal extends ListenerAdapter {
    public static final ScheduledExecutorService scheduler = Executors.newScheduledThreadPool(1);

    @Override
    public void onModalInteraction(ModalInteractionEvent event) {
        if (event.getModalId().startsWith("changePsyhologModal:")) {
            String[] parts = event.getModalId().split(":");
            String ticketId = parts[1];
            String ticketName = parts[2];
            String[] channel = ticketName.split("-");
            String ticketIdname = channel[0];

            Guild guild = event.getGuild();
            if (guild == null) {
                event.reply("–û—à–∏–±–∫–∞: –≥–∏–ª—å–¥–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.").setEphemeral(true).queue();
                return;
            }

            TextChannel adminTextChannel = guild.getTextChannelById(CreateTicket.adminChannel);

            if (ticketId == null) {
                event.reply("–û—à–∏–±–∫–∞: —Ç–∏–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.").setEphemeral(true).queue();
                return;
            }

            Member member = event.getMember();
            if (member == null) {
                event.reply("–û—à–∏–±–∫–∞: –º–µ–º–±–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.").setEphemeral(true).queue();
                return;
            }

            Role role = guild.getRoleById(CreateTicket.psyhologRole);
            if (role == null) {
                event.reply("–û—à–∏–±–∫–∞: —Ä–æ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.").setEphemeral(true).queue();
                return;
            }

            if (member.getRoles().contains(role)) {
                EmbedBuilder embedBuilder = new EmbedBuilder()
                        .setTitle("üö® –ü—Å–∏—Ö–æ–ª–æ–≥ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Å–º–µ–Ω—É üö®")
                        .setColor(Color.RED)
                        .addField("üë§ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç", member.getAsMention(), false)
                        .addField("üìÑ –û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç –ø—Å–∏—Ö–æ–ª–æ–≥–∞", event.getValue("why").getAsString(), false)
                        .addField("üìÑ –¢–∏–∫–µ—Ç", "–ù–æ–º–µ—Ä: " + ticketName + "\n –ê–π–¥–∏: " + ticketId, false)
                        .addField("üìÑ –û–ø–∏—Å–∞–Ω–∏–µ —Ç–∏–∫–µ—Ç–∞", DataStorage.getInstance().getTicketDes().get(ticketName), false)
                        .addField("üîî –î–µ–π—Å—Ç–≤–∏–µ", "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –∑–∞–±—Ä–∞—Ç—å —Ç–∏–∫–µ—Ç", false)
                        .setTimestamp(Instant.now());

                adminTextChannel.sendMessageEmbeds(embedBuilder.build()).addActionRow(
                        Button.primary("re-ticket:" + ticketIdname + ":" + ticketId, "–í–∑—è—Ç—å —Ç–∏–∫–µ—Ç")
                                .withEmoji(Emoji.fromUnicode("üé´"))
                ).queue();

                // Properly acknowledge the modal interaction to prevent it from hanging
                event.reply("–ó–∞–ø—Ä–æ—Å –Ω–∞ —Å–º–µ–Ω—É —Ç–∏–∫–µ—Ç–∞ –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.").setEphemeral(true).queue();

                // Schedule the deletion of the message
                scheduler.schedule(() -> {
                    event.getMessage().delete().queue();
                }, 10, TimeUnit.MINUTES);
            } else {
                event.reply("–û—à–∏–±–∫–∞: —É –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.").setEphemeral(true).queue();
            }
        }
    }
}
