package org.Psyholog.Ticket;

import net.dv8tion.jda.api.EmbedBuilder;
import net.dv8tion.jda.api.Permission;
import net.dv8tion.jda.api.entities.Guild;
import net.dv8tion.jda.api.entities.Member;
import net.dv8tion.jda.api.entities.PermissionOverride;
import net.dv8tion.jda.api.entities.Role;
import net.dv8tion.jda.api.entities.channel.concrete.TextChannel;
import net.dv8tion.jda.api.entities.emoji.Emoji;
import net.dv8tion.jda.api.events.interaction.component.ButtonInteractionEvent;
import net.dv8tion.jda.api.hooks.ListenerAdapter;
import net.dv8tion.jda.api.interactions.components.ActionRow;
import net.dv8tion.jda.api.interactions.components.buttons.Button;
import org.Psyholog.Main;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.awt.*;
import java.time.Instant;
import java.util.EnumSet;
import java.util.List;
import java.util.Objects;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.TimeUnit;

public class TakeTicketButton extends ListenerAdapter {
    private static final Logger logger = LoggerFactory.getLogger(TakeTicketButton.class);
    public static final ScheduledExecutorService scheduler = Executors.newScheduledThreadPool(1);

    @Override
    public void onButtonInteraction(ButtonInteractionEvent event) {   // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –≤–∑—è—Ç—å —Ç–∏–∫–µ—Ç
        if (event.getButton().getId().startsWith("take-ticket:")) {
            String[] parts = event.getButton().getId().split(":");
            String ticketNumber = parts[1];
            String ticketName = parts[2];
            String ticketId = DataStorage.getInstance().getTicketId(Integer.parseInt(ticketNumber));


            Guild guild = event.getGuild();
            if (guild == null) {
                event.reply("–û—à–∏–±–∫–∞: –≥–∏–ª—å–¥–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.").setEphemeral(true).queue();
                return;
            }

            if (DataStorage.getInstance().getTicketStatus(ticketId).equals("closed")) {
                event.reply("–û—à–∏–±–∫–∞: —Ç–∏–∫–µ—Ç —É–∂–µ –∑–∞–∫—Ä—ã—Ç").setEphemeral(true).queue();
                return;
            }

            Member member = event.getMember();
            if (member == null) {
                event.reply("–û—à–∏–±–∫–∞: —É—á–∞—Å—Ç–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.").setEphemeral(true).queue();
                return;
            }

            event.getGuild().retrieveMemberById(member.getId()).queue(updatedMember -> {
                if (updatedMember.getRoles().stream().anyMatch(role -> role.getId().equals(CreateTicket.PSYCHOLOGY_ROLE))) {
                    TextChannel textChannel = guild.getTextChannelById(ticketId);
                    Member user = guild.getMemberById(DataStorage.getInstance().getUser(ticketId));

                    if (user == null) {
                        event.editComponents(
                                ActionRow.of(
                                        Button.danger("taken-ticket", "–¢–∏–∫–µ—Ç –±—ã–ª –∑–∞–∫—Ä—ã—Ç, —é–∑–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω").asDisabled().withEmoji(Emoji.fromUnicode("‚ùå")),
                                        Button.link(textChannel.getJumpUrl(), "–ü–µ—Ä–µ–π—Ç–∏ –∫ —Ç–∏–∫–µ—Ç—É")
                                )
                        ).queue();
                        scheduler.schedule(() -> {
                            event.getMessage().delete().queue();
                        }, 10, TimeUnit.MINUTES);

                        DataStorage.getInstance().closeTicket(ticketId);

                        textChannel.delete().queue();
                        return;
                    }

                    if (textChannel != null) {
                        String newChannelName = ticketName + "-" + member.getEffectiveName();
                        textChannel.getManager().setName(newChannelName).queue(
                                success -> {
                                    event.editComponents(
                                            ActionRow.of(
                                                    Button.danger("taken-ticket", "–í–∑—è–ª: " + member.getEffectiveName()).asDisabled()
                                                            .withEmoji(Emoji.fromUnicode("‚úÖ")),
                                                    Button.link(textChannel.getJumpUrl(), "–ü–µ—Ä–µ–π—Ç–∏ –∫ —Ç–∏–∫–µ—Ç—É")
                                            )
                                    ).queue();

                                    scheduler.schedule(() -> {
                                        event.getMessage().delete().queue();
                                    }, 10, TimeUnit.MINUTES);
                                },
                                error -> event.reply("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–º–µ–Ω–∏ –∫–∞–Ω–∞–ª–∞: " + error.getMessage()).setEphemeral(true).queue()
                        );

                        Role psychologistRole = guild.getRoleById(CreateTicket.PSYCHOLOGY_ROLE);
                        if (psychologistRole == null) {
                            event.reply("–û—à–∏–±–∫–∞: —Ä–æ–ª—å –ø—Å–∏—Ö–æ–ª–æ–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.").setEphemeral(true).queue();
                            return;
                        }

                        DataStorage.getInstance().assignPsychologist(Integer.parseInt(ticketNumber), member.getId());

                        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–∞
                        PermissionOverride existingPermission = textChannel.getPermissionOverride(member);

                        if (existingPermission != null) {
                            // –ï—Å–ª–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ
                            existingPermission.getManager()
                                    .grant(EnumSet.of(Permission.VIEW_CHANNEL, Permission.MESSAGE_MANAGE))
                                    .queue(
                                            success -> logger.info("–ü—Ä–∞–≤–∞ –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã."),
                                            error -> logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–∞–≤ –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–∞: " + error.getMessage())
                                    );
                        } else {
                            // –ï—Å–ª–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ
                            textChannel.upsertPermissionOverride(member)
                                    .setAllowed(EnumSet.of(Permission.VIEW_CHANNEL, Permission.MESSAGE_MANAGE))
                                    .queue(
                                            success -> logger.info("–ü—Ä–∞–≤–∞ –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã."),
                                            error -> logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–∞–≤ –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–∞: " + error.getMessage())
                                    );
                        }

                        EmbedBuilder embedBuilder = new EmbedBuilder()
                                .setColor(Color.DARK_GRAY)
                                .setTitle("üéâ –ü—Å–∏—Ö–æ–ª–æ–≥ –Ω–∞–π–¥–µ–Ω!")
                                .setDescription("–í–∞—à –ø—Å–∏—Ö–æ–ª–æ–≥: " + member.getAsMention())
                                .addField("‚ú® –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞", "–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –æ–±—Å—É–∂–¥–µ–Ω–∏–µ.", false)
                                .setFooter("–ú—ã –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å –≤–∞–º!")
                                .setTimestamp(Instant.now());

                        Double rating = DataStorage.getInstance().getAverageRating(member.getId());
                        Integer countOfRatings = DataStorage.getInstance().getCountOfRatings(member.getId());

                        if (rating != null && countOfRatings != null) {
                            embedBuilder.setDescription("–í–∞—à –ø—Å–∏—Ö–æ–ª–æ–≥: " + member.getAsMention() +
                                    "\n–ï–≥–æ —Å—Ä–µ–¥–Ω–∏–π –±–∞–ª: " + rating +
                                    "\n–ï–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ü–µ–Ω–æ–∫: " + countOfRatings);
                        }

                        textChannel.sendMessageEmbeds(embedBuilder.build()).queue();

                        logger.info(member.getEffectiveName() + " –≤–∑—è–ª —Ç–∏–∫–µ—Ç " + ticketId);
                    } else {
                        event.reply("–û—à–∏–±–∫–∞: –∫–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.").setEphemeral(true).queue();
                    }
                } else {
                    event.reply("–£ –≤–∞—Å –Ω–µ—Ç—É —Ä–æ–ª–∏ –ø—Å–∏—Ö–æ–ª–æ–≥–∞!").setEphemeral(true).queue();
                }
            });
        }
    }
}
