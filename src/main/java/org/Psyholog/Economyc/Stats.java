package org.Psyholog.Economyc;

import net.dv8tion.jda.api.EmbedBuilder;
import net.dv8tion.jda.api.entities.Member;
import net.dv8tion.jda.api.entities.Role;
import net.dv8tion.jda.api.events.interaction.command.SlashCommandInteractionEvent;
import net.dv8tion.jda.api.hooks.ListenerAdapter;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.awt.*;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.time.temporal.ChronoUnit;
import java.util.stream.Collectors;

public class Stats extends ListenerAdapter {
    private static final Logger logger = LoggerFactory.getLogger(Stats.class);

    @Override
    public void onSlashCommandInteraction(SlashCommandInteractionEvent event) {

        if (event.getName().equals("stats")) {
            Member member = event.getMember();
            if (member == null) {
                event.reply("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ.").setEphemeral(true).queue();
                return;
            }

            String balance = String.valueOf(DatabaseManager.getBalance(member.getId())); // –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å
            LocalDate joinDate = member.getTimeJoined().toLocalDate();
            LocalDate today = LocalDate.now();
            long daysOnServer = ChronoUnit.DAYS.between(joinDate, today); // –°—á–∏—Ç–∞–µ–º –¥–Ω–∏

            String creationDate = member.getUser().getTimeCreated().format(DateTimeFormatter.ofPattern("dd.MM.yyyy HH:mm"));
            String roles = member.getRoles().isEmpty() ? "–ù–µ—Ç —Ä–æ–ª–µ–π" :
                    member.getRoles().stream().map(Role::getName).collect(Collectors.joining(", "));

            EmbedBuilder embedBuilder = new EmbedBuilder()
                    .setTitle("üë§ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: " + member.getEffectiveName())
                    .setThumbnail(member.getEffectiveAvatarUrl()) // –ê–≤–∞—Ç–∞—Ä–∫–∞
                    .setColor(Color.CYAN) // –¶–≤–µ—Ç —Ä–∞–º–∫–∏
                    .addField("üí∞ –ë–∞–ª–∞–Ω—Å:", balance + " –º–æ–Ω–µ—Ç", false)
                    .addField("‚è≥ –í—ã —Å –Ω–∞–º–∏ —É–∂–µ:", daysOnServer + " –¥–Ω–µ–π", false)
                    .addField("üìÜ –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞:", creationDate, false)
                    .addField("üèÖ –†–æ–ª–∏:", roles, false)
                    .setFooter("ID: " + member.getId(), member.getEffectiveAvatarUrl());

            event.replyEmbeds(embedBuilder.build()).queue();
        }

        if (event.getName().equals("add_coins")) {
            long memberId;
            if (event.getOption("id") != null) {
                memberId = event.getOption("id").getAsLong();
            } else {
                event.reply("–ù—É–∂–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è").setEphemeral(true).queue();
                logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–µ—Ä–µ–¥–∞–ª –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –∫–æ–º–∞–Ω–¥—ã");
                return;
            }
            int coinsCount;
            if (event.getOption("coins") != null) {
                coinsCount = event.getOption("coins").getAsInt();
            } else {
                event.reply("–ù—É–∂–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–∏–Ω–æ–≤").setEphemeral(true).queue();
                logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–µ—Ä–µ–¥–∞–ª –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –∫–æ–º–∞–Ω–¥—ã");
                return;
            }
            DatabaseManager.addCoins(memberId, coinsCount);
            event.reply("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ: " + coinsCount + " –∫–æ–∏–Ω–æ–≤").setEphemeral(true).queue();
        }
    }
}
